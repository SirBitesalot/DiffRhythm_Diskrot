{
  "swagger": "2.0",
  "info": {
    "title": "diskrot: Create",
    "description": "The API for this application",
    "version": "1.0.0"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/api/v1/status/{id}": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Return inference status",
        "description": "This make a request against the inference server to determine if the song has finished process.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get song status.",
            "schema": {
              "$ref": "#/definitions/SongStatus"
            }
          }
        }
      }
    },
    "/api/v1/library": {
      "get": {
        "tags": [
          "Library"
        ],
        "summary": "Returns a list of songs",
        "description": "This will return a list of all songs",
        "responses": {
          "200": {
            "description": "Get a list of your songs.",
            "schema": {
              "$ref": "#/definitions/GetLibraryResponse"
            }
          }
        }
      }
    },
    "/api/v1/library/song/{song}/action/{acton}": {
      "post": {
        "tags": [
          "Library"
        ],
        "summary": "Performs an action against a song",
        "description": "This allows you to favorite, unfavorite, delete, and restore a song from the trash.",
        "parameters": [
          {
            "name": "song",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "acton",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully update song"
          }
        }
      }
    },
    "/api/v1/prompt": {
      "post": {
        "tags": [
          "Prompt"
        ],
        "summary": "Updates a prompt",
        "description": "This allows you to update a prompt.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Update a prompt.",
            "schema": {
              "$ref": "#/definitions/Prompt"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated a prompt"
          }
        }
      }
    },
    "/api/v1/prompt/{id}": {
      "get": {
        "tags": [
          "Prompt"
        ],
        "summary": "Returns details on a prompt",
        "description": "This will return a prompt based on the id. If you pass LRC or POET it will return the system default prompt",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific prompt.",
            "schema": {
              "$ref": "#/definitions/Prompt"
            }
          }
        }
      }
    },
    "/api/v1/music/generate": {
      "post": {
        "tags": [
          "Music"
        ],
        "summary": "Submits a request to generate music",
        "description": "This API will make a request to the inference server to generate music",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Submits a song for generation.",
            "schema": {
              "$ref": "#/definitions/Song"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully submitted a song for generation",
            "schema": {
              "$ref": "#/definitions/MusicGenerationResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Song": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Banger #1"
        },
        "lyrics": {
          "type": "string",
          "example": "I am a song. (la la la)"
        },
        "duration": {
          "type": "number",
          "example": 95
        },
        "steps": {
          "type": "number",
          "example": 32
        },
        "cfg_strength": {
          "type": "number",
          "example": 6
        },
        "chunked": {
          "type": "boolean",
          "example": true
        },
        "tags": {
          "type": "string",
          "example": "rock and roll, hip hop"
        },
        "negative_tags": {
          "type": "string",
          "example": "heavy metal, noise"
        },
        "lrc_id": {
          "type": "string",
          "example": "b7e6a5d9-5f42-4a8b-9a38-47ef2e2a8df1"
        }
      }
    },
    "Prompt": {
      "type": "object",
      "properties": {
        "prompt": {
          "type": "string",
          "example": "Take the input, and produce an Simple LRC format file which takes into account time required to sing the previous line. \n            Time tags have the format [mm:ss.xx]lyric , where mm is minutes, ss is seconds, xx is hundredths of a second, \n            and lyric is the lyric to be played at that time. Do not provide any other information. I require just the file.\n\n            Example output:\n\n            [00:12.00]Line 1 lyrics\n            [00:17.20]Line 2 lyrics"
        },
        "model": {
          "type": "string",
          "example": "llama-3.2-3b-instruct"
        },
        "category": {
          "type": "string",
          "example": "LRC"
        },
        "is_default": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "SongStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "b7e6a5d9-5f42-4a8b-9a38-47ef2e2a8df1"
        },
        "title": {
          "type": "string",
          "example": "Banger #1"
        },
        "filename": {
          "type": "string",
          "example": "s3://bucket/folder/song.wav"
        },
        "dt_created": {
          "type": "string",
          "example": "2025-03-12T00:00:00+05:00"
        },
        "processing_status": {
          "type": "string",
          "example": "NEW"
        }
      }
    },
    "MusicGenerationResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "b7e6a5d9-5f42-4a8b-9a38-47ef2e2a8df1"
        }
      }
    },
    "GetLibraryResponse": {
      "type": "object",
      "properties": {
        "library": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "example": "Banger #1"
              },
              "lyrics": {
                "type": "string",
                "example": "I am a song. (la la la)"
              },
              "duration": {
                "type": "number",
                "example": 95
              },
              "steps": {
                "type": "number",
                "example": 32
              },
              "cfg_strength": {
                "type": "number",
                "example": 6
              },
              "chunked": {
                "type": "boolean",
                "example": true
              },
              "tags": {
                "type": "string",
                "example": "rock and roll, hip hop"
              },
              "negative_tags": {
                "type": "string",
                "example": "heavy metal, noise"
              },
              "lrc_id": {
                "type": "string",
                "example": "b7e6a5d9-5f42-4a8b-9a38-47ef2e2a8df1"
              }
            }
          }
        }
      }
    }
  }
}